using namespace std;

// 建议10 尽量少使用全局变量
// 1.由于全局变量是静态存储方式，程序执行过程中都会占用存储单元
// 2.降低函数的通用性。在程序设计时，要求模块的功能单一，各模块之间相互影响尽量少
	// 把函数做成一个封闭体，从而通过"实参-形参"的渠道来实现与外界的联系，移植性，可读性强。
// 3.使用全局变量过多，降低程序的清晰性，各个函数执行时都有可能改变全局变量的值
// 4.如果在同一源文件内，外部变量与局部变量同名，则在局域变量作用域内，外部变量会被"屏蔽"

// a.如果全局变量仅需要在单个源文件中访问，建议修改为静态全局变量，降低模块间的耦合度
// b.如果全局变量仅由单个函数访问，建议将全局变量改为这个函数的静态局部变量，降低耦合度
// c.考虑重入问题

// 建议11 尽量使用 const 声明值不会改变的变量
// 1.const 变量是制度变量，不是常量
// 2.确保变量的值不被修改
// 3.节省空间，避免不必要的内存分配
class Advise11
{
public:
	Advise11() {};
	~Advise11() {};

	void test_01_demo(); // const 提供了一种保护机制，能在编译阶段阻止其变量的值被修改，并不能完全防止在程序内部(甚至是外部)修改这个值
};
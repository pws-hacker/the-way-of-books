
using namespace std;

// 建议20 正确使用 for 循环
// 建议20-1 尽量使循环控制变量的取值采用 半开半闭区间 写法，拥有更高的可读性
// 建议20-2 尽量使循环体内工作量达到 最小化
// 如果一个循环体内的代码相当耗费资源，或者代码行数众多(超过20行，甚至超过一显示屏),这样不仅可读性不高，而且还大大降低运行效率
// 优化
// 1.重新设计这个循环：确认这些操作是否都必须放在这个循环里，并仔细考虑循环体内的语句是否可以放在循环体外，从而降低工作量，提高时间效率
// 2.写子函数。
// 建议20-3 避免在循环体内修改 循环变量
// 建议20-4 尽量使逻辑判断语句置于循环语句外层,减少执行逻辑判断语句的次数，提高程序的执行效率
// 循环体中的判断语句是否可以移到循环体外，与循环变量无关的判断语句可以移到循环体外，而有关的则不可以
// 建议20-5 尽量将多重循环中最长的循环放在最内层，最短的循环放在最外层，以减少 cpu 跨切循环层的次数
// 建议20-6 尽量将循环嵌套控制在 3层 以内

class Advise20
{
public:
	Advise20() {};
	~Advise20() {};

	void test_01_error(int n); // 闭区间 写法
	void test_01_right(int n); // 半开半闭区间 写法

	void test_02_error_demo(int n);  // 循环里使用逻辑判断语句
	void test_02_right_demo(int n);  // 逻辑判断语句置于循环外层

	void test_03_error_demo(); 
	void test_03_right_demo();  
};

// 建议21 适当地使用并行代码来优化 for循环
class Advise21
{
public:
	Advise21() {};
	~Advise21() {};

	void test_01_demo();
	void test_02_demo(); 
};

// 建议22 谨慎使用 do/while 与 while 循环
// 建议22-1 无线循环优先选用 for(;;) ，而不是 while(1)
// while(1) 有条件循环，每次都要进行判断，而 for(;;) 无条件循环，相比 while(1) 效率更高

// 建议22-2 优先使用 for循环 替代 do/while 与 while 循环
// 如果循环次数不明确的情况下，还是使用 do/while 与 while 循环，其余建议优先使用 for 循环


// 建议23 正确使用 switch 语句
// switch 语句只能测试 是否相等，case 语句后只能是整型或字符型的常量或常量表达式
// if 语句还能够测试关系与逻辑表达式
// 建议23-1 不要忘记在 case 语句的结尾添加 break 语句
// 建议23-2 不要忘记在 switch 语句的结尾添加 default 语句，default 语句用于检查默认情况，或者处理错误情况
// 建议23-4 当 switch 语句较长时，尽量把 case 语句发生频率较高的放在 最上层，发生频率低的放在最下层，可以节省效率

// 建议24 选择合理的 case 语句排序方法
// 建议24-1 尽量按照字母或数字顺序来排列各条 case 语句(前提是概率发生的频率差不多)
// 建议24-2 尽量将情况正常的 case 语句排在最前面
// 建议24-3 尽量根据发生频率来排列各条 case 语句

// 建议25 尽量避免使用 goto 语句



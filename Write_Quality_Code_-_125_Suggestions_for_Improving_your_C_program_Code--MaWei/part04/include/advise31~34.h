using namespace std;

// 建议31 函数的抽象级别应该在同一层次
// 建议32 尽可能为简单功能编写函数
// 用函数可使其功能明确化，具体化，从而增加程序可读性，并且方便代码的维护和测试

class Advise31
{
public:
	Advise31() {};
	~Advise31() {};

	void test_01_error();
	void test_01_right();

};

// 建议33 避免多段代码重复做同一件事情
// 如果代码各语句之间有实质性关联并且是完成同一项功能的，可以考虑把代码抽象成一个新的函数
class Advise33
{
public:
	Advise33() {};
	~Advise33() {};

	void test_01_demo();

};

// 建议34 尽量避免编写不可重入函数、
// 
// 可重入函数由多个任务并发使用，程序员在使用时不必担心数据错误；它也可以在任意时刻被中断，稍后继续运行，而不会丢失数据
// 因此，可重入函数要么使用本地变量，要么在使用全局变量时保护自己的数据
// 
// 不可重入函数则不能由超过一个任务所共享，除非能确保函数的互斥(使用信号量或者在代码的关键部分禁用中断)

// 建议34-1 避免在函数中使用 static 局部变量
// 建议34-2 避免函数返回指向静态数据的指针
// 在函数中，使用 static 局部变量会导致函数不可重入;同样如果函数返回指向静态数据的指针，也会导致函数不可重入
// 避免调用任何不可重入函数
// 在程序中，如果一个函数调用了另外一个不可重入函数，那么这个函数一定也是不可重入的。
// 建议34-4 对于全局变量，应通过互斥信号量(即P、V操作)或者中断机制等方法来保证函数的线程安全
// 
// 建议34-5 理解可重入函数与线程安全函数之间的关系


class Advise34
{
public:
	Advise34() {};
	~Advise34() {};

	void test_01_error_demo();
	void test_01_right_demo();

	// 互斥信号量(P、V操作)
	void test_02_demo();  // pthread.h 是 linux 平台支持，windows 不支持，需要安装 pthreads-w32

};